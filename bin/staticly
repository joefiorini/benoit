#!/usr/bin/env ruby
$:.unshift File.expand_path("../../bundle", __FILE__)
$:.unshift File.expand_path("../../lib", __FILE__)

# Force bundler to load standalone bundle
# even if it's already loaded
load 'bundler/setup.rb'

require 'staticly'
require 'gli'

include GLI::App

default_command :noop

program_desc 'Describe your application here'

version Staticly::VERSION

desc 'Make Staticly\'s output friendly for app communication'
switch [:"app-mode"]

desc 'Path to the site to build'
arg_name 'Input path'
flag [:i,:"input-path"]

desc 'Path to which to output the site'
arg_name 'Output path'
flag [:o,:"output-path"]

desc 'Path in which to store temporary files'
arg_name 'Temp cache path'
flag [:c,:"cache-path"]

desc 'Describe build here'
arg_name 'Describe arguments to build here'
command :build do |c|
  c.desc 'Describe a switch to build'
  c.switch :s

  c.desc 'Describe a flag to build'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
    # staticly build --app-mode --input-path ~/Sites/static.ly --output-path ../test\ site/tmp-output --cache-path ../test\ site/tmp-cache

    assetfile_path = File.join(File.expand_path("../../", __FILE__), "Assetfile")
    Dir.chdir(global_options[:"input-path"]) do
      project = Staticly::PipelineProject.new(assetfile_path, global_options[:"output-path"], global_options[:"cache-path"])
      project.invoke
    end
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "build command ran"
  end
end

desc 'Describe clean here'
arg_name 'Describe arguments to clean here'
command :clean do |c|
  c.action do |global_options,options,args|
    puts "clean command ran"
  end
end

desc 'Describe rebuild here'
arg_name 'Describe arguments to rebuild here'
command :rebuild do |c|
  c.action do |global_options,options,args|
    puts "rebuild command ran"
  end
end

command :noop do |c|
  c.action do |global_options,options,args|
    if global_options[:version]
      puts Staticly::VERSION
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
