#!/usr/bin/env ruby
$:.unshift File.expand_path("../../vendor/frontmatter/lib", __FILE__)
$:.unshift File.expand_path("../../vendor/rake-pipeline/lib", __FILE__)
require 'bundler/setup'

require 'benoit'
require 'gli'

include GLI::App

default_command :noop

program_desc 'Describe your application here'

version Benoit::VERSION

desc 'Make Benoit\'s output friendly for app communication'
switch [:"app-mode"]

desc 'Path to the site to build'
arg_name 'Input path'
flag [:i,:"input-path"]

desc 'Path to which to output the site'
arg_name 'Output path'
flag [:o,:"output-path"]

desc 'Path in which to store temporary files'
arg_name 'Temp cache path'
flag [:c,:"cache-path"]

desc 'Describe build here'
arg_name 'Describe arguments to build here'
command :build do |c|
  c.desc 'Clean up (delete) any existing build files for this site before building'
  c.switch :clean

  c.desc 'Name of file containing files that should not be copied or processed to output directory'
  c.default_value '.benoitignore'
  c.flag [:g, :"ignorefile"]

  c.desc 'Describe a flag to build'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
    # benoit build --app-mode --input-path ~/Sites/static.ly --output-path ../test\ site/tmp-output --cache-path ../test\ site/tmp-cache

    site_path = global_options[:"input-path"] || Dir.pwd
    assetfile_path = File.join(File.expand_path("../../", __FILE__), "Assetfile")
    Dir.chdir(site_path) do
      Benoit.configure do |config|
        config.clean_before_build = options[:clean]
        config.ignorefile = options[:"ignorefile"]
      end
      project = Benoit::PipelineProject.new(assetfile_path, Benoit.config.output_path, Benoit.config.cache_path)
      project.invoke
    end
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "build command ran"
  end
end

command :server do |c|

  c.desc 'Name of file containing files that should not be copied or processed to output directory'
  c.default_value '.benoitignore'
  c.flag [:g, :"ignorefile"]

  c.action do |global_options,options,args|

    STDOUT.sync = true
    STDERR.sync = true

    Benoit::Logger.notice "starting server.."

    site_path = global_options[:"input-path"] || Dir.pwd
    assetfile_path = File.join(File.expand_path("../../", __FILE__), "Assetfile")
    Dir.chdir(site_path) do
      Benoit.configure do |config|
        puts "specified ignorefile: #{options[:"ignorefile"].inspect}"
        config.ignorefile = options[:"ignorefile"]
      end
      require 'benoit/server'
      project = Benoit::PipelineProject.new(assetfile_path, Benoit.config.output_path, Benoit.config.cache_path)
      Benoit::Server.new(project, daemonize: false).start
    end
  end
end

command :noop do |c|
  c.action do |global_options,options,args|
    if global_options[:version]
      puts Benoit::VERSION
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  Benoit.configure do |config|
    config.site_path = global[:"input-path"] || Dir.pwd
    site_name = File.basename(config.site_path)
    config.output_path = global[:"output-path"] || default_output_path
    config.cache_path = global[:"cache-path"] || default_cache_path(site_name)
    if global[:"app-mode"]
      config.output_mode = :app
    else
      config.output_mode = :user
    end
  end
  true
end

def default_output_path
  File.expand_path(File.join(Dir.pwd, "_build"))
end

def default_cache_path(site_name)
  File.expand_path("/tmp/.benoit/tmpcache/#{site_name}")
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  Benoit::Logger.report_error(exception)
end

exit run(ARGV)
